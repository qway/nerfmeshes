# Parameters to setup experiment.
experiment:
  # Unique experiment identifier
  id: buff-colmap-fern
  # Base model, whether to use tree voxel sampling (BuFFModel) instead of hierarchical sampling (NeRFModel)
  model: BuFFModel
  # Experiment description
  description: High res colmap fern buff model.
  # Experiment logs will be stored at "logdir"/"id"
  logdir: ../logs
  # Seed for random number generators (for repeatability).
  randomseed: 42
  # Number of training iterations.
  train_iters: 200000
  # Number of training iterations after which to validate.
  validate_every: 5000
  # Number of training iterations after which to print progress.
  print_every: 100
  # Base directory of mesh dataset.
  meshdir: ../data/meshes
  # Training early stopping due to being stuck in local minima
  use_early_stopping: False
  # Early stopping step
  early_stopping_step: 25
  # Compute chamfer loss
  chamfer_loss: False
  # Chamfer loss sampling size
  chamfer_sampling_size: 2400

# Tree parameters.
tree:
  # Root subdivision power, higher requires more memory
  subdivision_outer_count: 16
  # Tree subdivision power, higher requires more memory
  subdivision_inner_count: 2
  # Max tree depth, higher requires more memory
  max_depth: 4
  # Threshold weight for pruning
  eps: 0.0001
  # Voxel random sampling instead of linearly deterministically
  use_random_sampling: False
  # Max tree voxels
  max_voxel_count: 4096
  # Step size before ticking ray batch integration (initially the scene is unresolved)
  step_size_integration_offset: 6000
  # Step size consolidation
  step_size_tree: 6000

# Logging parameters
logging:
  # Use acronyms for compact logging
  use_acronyms: True
  # Project 2D points into synthetic world space
  use_projection: True
  # Step size for use_projection
  projection_step_size: 15000

# Dataset parameters.
dataset:
  # Type of dataset (Blender vs LLFF vs DeepVoxels vs something else)
  type: colmap
  # Path to the root dir of the chosen dataset.
  basedir: ../data/nerf_llff_data/fern
  # For the Blender dataset (synthetic), implies resolution scale
  reduced_resolution: 1
  # Stride (include one per "testskip" images in the dataset). Stride length (Blender datasets only).
  # When set to k (k > 1), it samples every kth sample from the dataset.
  testskip: 1
  # Use NDC (normalized device coordinates). Usually True for synthetic (Blender) datasets.
  use_ndc: False
  # Near clip plane (clip all depth values closer than this threshold).
  near: 0
  # Far clip plane (clip all depth values farther than this threshold).
  far: 1
  # Depth empty space plane.
  empty: 0.
  # Num workers.
  num_workers: 0
  # Down-sample factor for images from the LLFF dataset.
  llff_downsample_factor: 8
  # Determines the hold-out images for LLFF, step not the count.
  llff_hold_step: 8
  # Whether to render models using a white background (only for synthetic datasets).
  white_background: False
  # Caching parameters (works only on Blender, LLFF).
  caching:
    # Use cached dataset, if it's not created, create one.
    use_caching: True
    # Override existing cached dataset when new changes are done to the dataset loader.
    override_caching: True
    # Overrides basedir path to the following pre-cached dataset dir.
    cache_dir: ../cache/col-fern-cache
    # Number of random ray batches to draw per image as infinite data can't be cached.
    num_variations: 8
    # Sample all rays for the image and perform ray-batching during runtime.
    # Overrides --num-random-rays and num_variations.
    sample_all: True

# Model parameters.
models:
  # Coarse model.
  # Name of the torch.nn.Module class that implements the model.
  coarse_type: FlexibleNeRFModel
  # Coarse model parameters.
  coarse:
    # Number of layers in the model.
    num_layers: 8
    # Add a skip connection once in a while.
    skip_step: 4
    # Position encoding.
    encoding: positional
    # Number of view dependent layers (-1 for no view dependence)
    num_layers_view: -1
    # Size of the hidden layers
    hidden_size: 256
    # Whether to include the position (xyz) itself in its positional
    # encoding.
    include_input_xyz: True
    # Whether to perform log sampling in the positional encoding
    # of the coordinates.
    log_sampling_xyz: True
    # Number of encoding functions to use in the positional encoding
    # of the coordinates.
    num_encoding_fn_xyz: 10
    # Whether to include the direction itself in its positional encoding.
    include_input_dir: True
    # Number of encoding functions to use in the positional encoding
    # of the direction.
    num_encoding_fn_dir: 4
    # Whether to perform log sampling in the positional encoding
    # of the direction.
    log_sampling_dir: True
    # Additionally use viewing directions as input.
    use_viewdirs: True

# Optimizer params.
optimizer:
  # Name of the torch.optim class used for optimization.
  type: Adam
  # Learning rate. Default 5.0E-3
  lr: 5.0E-3

# Learning rate scheduler.
scheduler:
  # Scheduler type, either use custom DefaultScheduler or any from torch.optim.lr_scheduler
  type: DefaultScheduler
  # Scheduler params
  options:
    # Multiplicative factor of learning rate decay.
    gamma: 0.1
    # Period of learning rate decay. train_iters * 180%
    step_size: 360000

# NeRF parameters.
nerf:
  # Use viewing directions as input, in addition to the X, Y, Z coordinates.
  use_viewdirs: True
  # Encoding function for position (X, Y, Z).
  encode_position_fn: positional_encoding
  # Encoding function for ray direction (theta, phi).
  encode_direction_fn: positional_encoding
  # Training-specific parameters.
  train:
    # Number of random rays to retain from each image.
    # These sampled rays are used for training, and the others are discarded.
    num_random_rays: 2048
    # Size of each chunk (rays are batched into "chunks" and passed through
    # the network)
    chunksize: 1024
    # Whether to perturb the sampled depth values.
    perturb: False
    # Number of depth samples per ray for the coarse network.
    num_coarse: 192
    # Standard deviation of noise to be added to the radiance field when
    # performing volume rendering.
    radiance_field_noise_std: 0.2
    # Sample linearly in disparity space, as opposed to in depth space.
    lindisp: False
  # Validation-specific parameters.
  validation:
    # Number of random rays to retain from each image.
    # These sampled rays are used for training, and the others are discarded.
    chunksize: 1024
    # Whether to perturb the sampled depth values.
    perturb: False
    # Number of depth samples per ray for the coarse network.
    num_coarse: 192
    # Standard deviation of noise to be added to the radiance field when
    # performing volume rendering.
    radiance_field_noise_std: 0.
    # Sample linearly in disparity space, as opposed to in depth space.
    lindisp: False
    # Use smaller pool of random batch samples for faster validation epoch, use -1 if use the whole dataset.
    num_samples: 1
